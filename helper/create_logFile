---

### **1. M√©todo b√°sico: Escrever no ficheiro com `std::ofstream`**  
Este m√©todo escreve os erros num ficheiro chamado `errors.log`:  

```cpp
#include <iostream>
#include <fstream>

void logError(const std::string &message) {
    std::ofstream logFile("errors.log", std::ios::app); // Abre no modo de acrescento
    if (!logFile) {
        std::cerr << "N√£o foi poss√≠vel abrir o ficheiro de logs!" << std::endl;
        return;
    }
    logFile << "[ERRO] " << message << std::endl;
}
```

---

### **2. Registar erros com data e hora**
Se quiseres adicionar a **data e hora** ao log:  

```cpp
#include <iostream>
#include <fstream>
#include <ctime>

void logError(const std::string &message) {
    std::ofstream logFile("errors.log", std::ios::app);
    if (!logFile) {
        std::cerr << "N√£o foi poss√≠vel abrir o ficheiro de logs!" << std::endl;
        return;
    }

    // Obter a hora atual
    std::time_t now = std::time(nullptr);
    char timeStr[20];
    std::strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", std::localtime(&now));

    logFile << "[" << timeStr << "] [ERRO] " << message << std::endl;
}
```

Agora o ficheiro `errors.log` ter√° linhas como:  
```
[2025-03-06 12:34:56] [ERRO] Entrada de dados inv√°lida
```

---

### **3. Redirecionar `std::cerr` para um ficheiro**
Se quiseres capturar **todos os erros (`std::cerr`) automaticamente**, podes fazer isto no `main()`:

```cpp
#include <iostream>
#include <fstream>

int main() {
    std::ofstream logFile("errors.log", std::ios::app);
    if (!logFile) {
        std::cerr << "Erro ao abrir o ficheiro de logs!" << std::endl;
        return 1;
    }

    std::cerr.rdbuf(logFile.rdbuf()); // Redireciona `std::cerr` para o ficheiro

    std::cerr << "Isto √© um erro de teste" << std::endl;
    return 0;
}
```
Agora **qualquer mensagem enviada para `std::cerr` ser√° escrita em `errors.log`**.

---

### **4. Criar uma classe `Logger` para gerir logs**
Se quiseres uma solu√ß√£o mais flex√≠vel:

```cpp
#include <iostream>
#include <fstream>
#include <ctime>

class Logger {
private:
    std::ofstream logFile;

public:
    Logger(const std::string &filename) {
        logFile.open(filename, std::ios::app);
        if (!logFile) {
            std::cerr << "N√£o foi poss√≠vel abrir o ficheiro de logs!" << std::endl;
        }
    }

    ~Logger() {
        if (logFile.is_open()) {
            logFile.close();
        }
    }

    void log(const std::string &level, const std::string &message) {
        if (!logFile) return;

        std::time_t now = std::time(nullptr);
        char timeStr[20];
        std::strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", std::localtime(&now));

        logFile << "[" << timeStr << "] [" << level << "] " << message << std::endl;
    }
};

// Uso da classe:
int main() {
    Logger logger("errors.log");
    logger.log("ERRO", "O ficheiro de configura√ß√£o n√£o foi encontrado");
    logger.log("AVISO", "Mem√≥ria baixa");

    return 0;
}
```

---

### **5. Registar exce√ß√µes (`try-catch`)**
Se o teu c√≥digo usa **exce√ß√µes**, podes registar erros assim:

```cpp
try {
    throw std::runtime_error("Algo correu mal!");
} catch (const std::exception &e) {
    logError(e.what());
}
```

---

### **Qual m√©todo escolher?**
- **Projeto simples** ‚Üí M√©todo `1` ou `2` (com `ofstream`).
- **Capturar todos os erros** ‚Üí M√©todo `3` (`std::cerr` redirecionado).
- **Projeto mais avan√ßado** ‚Üí M√©todo `4` (classe `Logger`).
- **Gerir exce√ß√µes** ‚Üí M√©todo `5` (`try-catch` + log).  

Se precisares de algo mais espec√≠fico, diz-me! üöÄ

–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —É —Ñ–∞–π–ª —É –ø—Ä–æ—î–∫—Ç—ñ **C++** –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∫—ñ–ª—å–∫–æ–º–∞ —Å–ø–æ—Å–æ–±–∞–º–∏, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–º–æ–≥. –û—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è **std::ofstream** –¥–ª—è –∑–∞–ø–∏—Å—É –ø–æ–º–∏–ª–æ–∫ —É —Ñ–∞–π–ª. –û—Å—å –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —è–∫—ñ —Ç–æ–±—ñ –º–æ–∂—É—Ç—å –ø—ñ–¥—ñ–π—Ç–∏.  

---

### **1. –ë–∞–∑–æ–≤–∏–π —Å–ø–æ—Å—ñ–±: –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª —á–µ—Ä–µ–∑ `std::ofstream`**  
–¶–µ–π –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—É—î –ø–æ–º–∏–ª–∫–∏ —É —Ñ–∞–π–ª `errors.log`:  

```cpp
#include <iostream>
#include <fstream>

void logError(const std::string &message) {
    std::ofstream logFile("errors.log", std::ios::app); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —É —Ä–µ–∂–∏–º—ñ –¥–æ–ø–∏—Å—É
    if (!logFile) {
        std::cerr << "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥—ñ–≤!" << std::endl;
        return;
    }
    logFile << "[ERROR] " << message << std::endl;
}
```

### **2. –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–º —ñ –¥–∞—Ç–æ—é**
–Ø–∫—â–æ —Ö–æ—á–µ—à –±–∞—á–∏—Ç–∏ **—á–∞—Å —ñ –¥–∞—Ç—É**, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ó—Ö —Ç–∞–∫:  

```cpp
#include <iostream>
#include <fstream>
#include <ctime>

void logError(const std::string &message) {
    std::ofstream logFile("errors.log", std::ios::app);
    if (!logFile) {
        std::cerr << "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥—ñ–≤!" << std::endl;
        return;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    std::time_t now = std::time(nullptr);
    char timeStr[20];
    std::strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", std::localtime(&now));

    logFile << "[" << timeStr << "] [ERROR] " << message << std::endl;
}
```

–¢–µ–ø–µ—Ä —É —Ñ–∞–π–ª—ñ `errors.log` –±—É–¥–µ —â–æ—Å—å —Ç–∏–ø—É:  
```
[2025-03-06 12:34:56] [ERROR] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤—ñ–¥ –¥–∞–Ω–∏—Ö
```

---

### **3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `std::cerr` + –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É —Ñ–∞–π–ª**
–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à **–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ (`std::cerr`) —É —Ñ–∞–π–ª**, –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫ —É `main()`:
```cpp
#include <iostream>
#include <fstream>

int main() {
    std::ofstream logFile("errors.log", std::ios::app);
    if (!logFile) {
        std::cerr << "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤!" << std::endl;
        return 1;
    }

    std::cerr.rdbuf(logFile.rdbuf()); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è std::cerr —É —Ñ–∞–π–ª

    std::cerr << "–¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞" << std::endl;
    return 0;
}
```
–¢–µ–ø–µ—Ä **—É—Å—ñ `std::cerr` –≤–∏–≤–æ–¥–∏—Ç–∏–º—É—Ç—å—Å—è —É `errors.log`**.

---

### **4. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É `Logger`**
–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à –≥–Ω—É—á–∫–µ —Ä—ñ—à–µ–Ω–Ω—è ‚Äî –∑—Ä–æ–±–∏ **–æ–∫—Ä–µ–º–∏–π –∫–ª–∞—Å**:

```cpp
#include <iostream>
#include <fstream>
#include <ctime>

class Logger {
private:
    std::ofstream logFile;

public:
    Logger(const std::string &filename) {
        logFile.open(filename, std::ios::app);
        if (!logFile) {
            std::cerr << "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥—ñ–≤!" << std::endl;
        }
    }

    ~Logger() {
        if (logFile.is_open()) {
            logFile.close();
        }
    }

    void log(const std::string &level, const std::string &message) {
        if (!logFile) return;

        std::time_t now = std::time(nullptr);
        char timeStr[20];
        std::strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", std::localtime(&now));

        logFile << "[" << timeStr << "] [" << level << "] " << message << std::endl;
    }
};

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
int main() {
    Logger logger("errors.log");
    logger.log("ERROR", "–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    logger.log("WARNING", "–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–∞–º'—è—Ç—ñ");

    return 0;
}
```

### **5. –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–∏–¥–∞–Ω–Ω—è –≤–∏–Ω—è—Ç–∫—ñ–≤ (`throw`)**
–Ø–∫—â–æ —Ç–≤—ñ–π –∫–æ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **–≤–∏–Ω—è—Ç–∫–∏ (`try-catch`)**, –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –æ—Å—å —Ç–∞–∫:

```cpp
try {
    throw std::runtime_error("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!");
} catch (const std::exception &e) {
    logError(e.what());
}
```

---

- **–ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ—î–∫—Ç** ‚Üí –í–∞—Ä—ñ–∞–Ω—Ç `1` –∞–±–æ `2` (–∑–≤–∏—á–∞–π–Ω–∏–π `ofstream` –∑ —á–∞—Å–æ–º).
- **–õ–æ–≥—É–≤–∞—Ç–∏ –≤—Å–µ —á–µ—Ä–µ–∑ `std::cerr`** ‚Üí –í–∞—Ä—ñ–∞–Ω—Ç `3`.
- **–†–æ–∑—à–∏—Ä—é–≤–∞–Ω–∏–π –ø—Ä–æ—î–∫—Ç** ‚Üí –í–∞—Ä—ñ–∞–Ω—Ç `4` (–æ–∫—Ä–µ–º–∏–π –∫–ª–∞—Å `Logger`).
- **–û–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤** ‚Üí –í–∞—Ä—ñ–∞–Ω—Ç `5` (`try-catch` + –ª–æ–≥—É–≤–∞–Ω–Ω—è).

